drop database restaurant_picker;

create database restaurant_picker;

use restaurant_picker;

CREATE TABLE USER
(
  USER_ID VARCHAR(18) NOT NULL  
, FIRST_NAME VARCHAR(90) 
, LAST_NAME VARCHAR(90) 
, PHONE VARCHAR(72 ) 
, JOB_TITLE VARCHAR(90) 
, EMAIL_ADDR VARCHAR(210) 
, LOCATION VARCHAR(30) 
, ADDRESS1 VARCHAR(165) 
, ADDRESS2 VARCHAR(165) 
, CITY VARCHAR(90) 
, STATE VARCHAR(18) 
, POSTAL VARCHAR(36) 
, RESTAURANT_ID INT
, ROLE VARCHAR(20)
, PASSWORD VARCHAR(255)
, CONSTRAINT USER_ID_PK PRIMARY KEY (USER_ID)
);

CREATE TABLE RESTAURANT 
(
  ID  INT NOT NULL AUTO_INCREMENT
, PARENT_REST_ID INT 
, REST_NAME VARCHAR(100) NOT NULL 
, DESCRIPTION VARCHAR(255) NOT NULL 
, ADDRESS VARCHAR(255) NOT NULL
, CITY VARCHAR(90) 
, STATE VARCHAR(18) 
, POSTAL VARCHAR(36)
, PHONE_NUMBER VARCHAR(50)
, MOBILE_NUMBER INT(15) 
, OWNER_ID VARCHAR(18)
, ACTIVE INT(1) 
, CIN VARCHAR(100)
, TIN_NUM VARCHAR(100)
, CREATED_BY VARCHAR(18) 
, CREATED_ON DATE 
, LAST_UPDATED DATE 
, UPDATED_BY VARCHAR(18)
, CONSTRAINT RESTAURANT_ID_PK PRIMARY KEY (ID)
, FOREIGN KEY (PARENT_REST_ID) REFERENCES RESTAURANT(ID) 
);

ALTER TABLE USER
ADD FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID);

ALTER TABLE RESTAURANT 
ADD FOREIGN KEY (OWNER_ID) REFERENCES USER(USER_ID); 


/*CREATE TABLE ROLE 
(
  ID  INT NOT NULL AUTO_INCREMENT
, LAST_UPATED DATE 
, UPDATED_BY VARCHAR(18) 
, ROLE_NAME VARCHAR(18) 
, CONSTRAINT USER_ROLES_PK PRIMARY KEY (ID)
); 


CREATE TABLE USER_ROLE 
(
  ID  INT NOT NULL AUTO_INCREMENT
, USER_ID INT NOT NULL 
, ROLE_ID INT NOT NULL 
, CONSTRAINT USRROLE_PK PRIMARY KEY (ID) 
, FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID) 
, FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID) 
);*/ 

CREATE TABLE PROPERTIES(
	ID INT NOT NULL AUTO_INCREMENT,
    RESTAURANT_ID INT,
    PROPERTY_NAME VARCHAR(255),
	PROPERTY_VALUE VARCHAR(200),
    CREATED_BY VARCHAR(18), 
    CREATED_ON DATE,
    LAST_UPDATED DATE, 
    UPDATED_BY VARCHAR(18),	
    CONSTRAINT PROPERTIES_ID_PK PRIMARY KEY (ID),
    FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID)
);

CREATE TABLE PRODUCT(
	ID INT NOT NULL AUTO_INCREMENT,
	RESTAURANT_ID INT,
	CUISINE_ID INT,
	CATEGORY_ID INT,
	IS_VEG BOOLEAN,
	SUB_MENU_1 VARCHAR(200),
	SUB_MENU_2 VARCHAR(200),
	SUB_MENU_3 VARCHAR(200),
	ADDITIONAL VARCHAR(200),
	SERVE INT,
	QUANTITY VARCHAR(20),
	DINING_PRICE DOUBLE,
	TAKE_AWAY_PRICE DOUBLE,
	ONLINE_PRICE DOUBLE,
	SERVICE_CHARGE DOUBLE,
	TAKE_AWAY_PACKING_CHARGE DOUBLE,
	ONLINE_PACKING_CHARGE DOUBLE,
	ACTIVE TINYINT,
    PRODUCT_IMAGE VARCHAR(255),
	CONSTRAINT PRODUCT_ID_PK PRIMARY KEY (ID),
	FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID)
);

CREATE TABLE DINING_TABLE(
	ID INT NOT NULL AUTO_INCREMENT,
	RESTAURANT_ID INT,
   -- FLOOR INT NOT NULL,
   -- FLOOR_NAME VARCHAR(255),
	TABLE_ID INT NOT NULL,
	TABLE_NAME_VAL VARCHAR(100),
    -- SEAT_ID INT NOT NULL,
    -- SEAT_NAME VARCHAR(255),
    ACTIVE TINYINT,
	CONSTRAINT DINING_TABLE_PK PRIMARY KEY (ID),
	FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID)
);

CREATE TABLE ORDERS(
	ID INT NOT NULL AUTO_INCREMENT,
	RESTAURANT_ID INT,
    SUPPLIER_ID VARCHAR(18),
	BILL_AMOUNT INT,
    IS_ONLINE TINYINT,
	COMMENTS VARCHAR(2000),
    ORDER_CONFIRMED TINYINT,
    CANCELLED TINYINT,
	CREATED_BY VARCHAR(18), 
    CREATED_ON DATE,
    LAST_UPDATED DATE, 
    UPDATED_BY VARCHAR(18),	
	CONSTRAINT ORDERS_ID_PK PRIMARY KEY (ID),
	FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID),
	FOREIGN KEY (SUPPLIER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE ORDER_DETAILS(
	ID INT NOT NULL AUTO_INCREMENT,
	ORDER_ID INT,
	RESTAURANT_ID INT,
	-- FLOOR_ID INT , 
    TABLE_ID INT,
    -- SEAT_ID INT,
    NO_OF_PERSONS INT,
	PRODUCT_ID INT,
	QUANTITY INT,
	PRICE	DOUBLE,
    CREATED_BY VARCHAR(18), 
    CREATED_ON DATE,
    LAST_UPDATED DATE, 
    UPDATED_BY VARCHAR(18),	
	CONSTRAINT ORDER_DETAILS_ID_PK PRIMARY KEY (ID),
	FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
	-- FOREIGN KEY (FLOOR_ID) REFERENCES DINING_TABLE(FLOOR_ID),
	FOREIGN KEY (TABLE_ID) REFERENCES DINING_TABLE(ID),
	-- FOREIGN KEY (SEAT_ID) REFERENCES DINING_TABLE(SEAT_ID),
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE OPTIONS_KEY(
	ID INT NOT NULL,
    KEY_NAME VARCHAR(200),
    CREATED_BY VARCHAR(18), 
    CREATED_ON DATE,
    LAST_UPDATED DATE, 
    UPDATED_BY VARCHAR(18),	
    CONSTRAINT OPTIONS_KEY_ID_PK PRIMARY KEY (ID)
);

CREATE TABLE OPTIONS_LOOKUP(
	ID INT NOT NULL AUTO_INCREMENT,
	ITEM_VAL VARCHAR(200),
    OPTIONS_KEY_ID INT,
    OPTIONS_IMAGE VARCHAR(255),
    CREATED_BY VARCHAR(18), 
    CREATED_ON DATE,
    LAST_UPDATED DATE, 
    UPDATED_BY VARCHAR(18),
	CONSTRAINT ORDER_LOOKUP_ID_PK PRIMARY KEY (ID),
	FOREIGN KEY (OPTIONS_KEY_ID) REFERENCES OPTIONS_KEY(ID)
);


CREATE TABLE PAYMENT(
	ID INT NOT NULL AUTO_INCREMENT,
	RESTAURANT_ID INT,
	ORDER_ID INT,
    BILL_AMOUNT DOUBLE,
	ROUND_OFF DOUBLE,
    SGST DOUBLE,
    CGST DOUBLE,
    TOTAL_AMOUNT DOUBLE,
    PAYMENT_MODE VARCHAR(100),
    IS_PAYED TINYINT,
    CONSTRAINT PAYMENT_ID_PK PRIMARY KEY (ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
    FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID)
);

CREATE TABLE INPUT_IMAGE(
	ID INT NOT NULL AUTO_INCREMENT,
    RESTAURANT_ID INT,
	IMAGE_NAME VARCHAR(100),
    IMAGE_PATH VARCHAR(255),
	CREATED_BY VARCHAR(18), 
    CREATED_ON DATE,
    LAST_UPDATED DATE, 
    UPDATED_BY VARCHAR(18),
	CONSTRAINT IMAGE_ID_PK PRIMARY KEY (ID),
	FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID)
);

CREATE TABLE CUSTOMER(
	ID INT NOT NULL AUTO_INCREMENT,
    RESTAURANT_ID INT,
    ORDER_ID INT, 
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    ADDRESS1 VARCHAR(255),
    ADDRESS2 VARCHAR(255),
	CITY VARCHAR(90) 
	, STATE VARCHAR(18) 
	, POSTAL VARCHAR(36)
	, PHONE_NUMBER VARCHAR(50)
	, MOBILE_NUMBER INT(15),
	CONSTRAINT CUSTOMER_PK PRIMARY KEY (ID),
	FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID)
);

CREATE TABLE DELIVERY(
	ID INT NOT NULL AUTO_INCREMENT,
    RESTAURANT_ID INT,
    ORDER_ID INT, 
    DELIVERY_USER_ID INT,
    IS_DELIVERED TINYINT,
	CONSTRAINT CUSTOMER_PK PRIMARY KEY (ID),
	FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT(ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID)
);